#pragma once
#include "global_values.h"
#include "loaded_profile.h"
#include "game_settings.h"
#include <iostream>

namespace SkincReborn {

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;
	using namespace System::IO;
	using namespace System::Text;

	/// <summary>
	/// This is the Championship-menu
	/// </summary>
	public ref class chp_menu : public System::Windows::Forms::Form
	{
	public:
		chp_menu(void)
		{
			InitializeComponent();
		}

	protected:
		~chp_menu()
		{
			if (components)
			{
				delete components;
			}
		}
	private: System::Windows::Forms::Button^  bchp_start;
	private: System::Windows::Forms::Label^  player_displayname;
	private: System::Windows::Forms::PictureBox^  player_displayskin;
	private: System::Windows::Forms::Label^  dsp_spells;

	private: System::Windows::Forms::Label^  dsp_fly;
	private: System::Windows::Forms::Label^  dsp_nuke;
	private: System::Windows::Forms::Label^  dsp_createearth;

	private: System::Windows::Forms::Label^  dsp_stats;
	private: System::Windows::Forms::Label^  dsp_health;

	private: System::Windows::Forms::Label^  dsp_speed;
	private: System::Windows::Forms::Label^  dsp_dmg;

	private: System::Windows::Forms::Label^  dsp_completed;
	private: System::Windows::Forms::Label^  dsp_bogbeard;
	private: System::Windows::Forms::Label^  dsp_lynwood;
	private: System::Windows::Forms::Label^  dsp_firelord;
	private: System::Windows::Forms::Label^  dsp_teridax;
	private: System::Windows::Forms::Label^  dsp_bot;
	private: System::Windows::Forms::Label^  dsp_lance;
	private: System::Windows::Forms::Label^  dsp_next;
	private: System::Windows::Forms::Label^  dsp_name;
	private: System::Windows::Forms::Label^  dsp_map;
	private: System::Windows::Forms::Label^  dsp_dif;
	private: System::Windows::Forms::PictureBox^  b_wizard;

	private: System::Windows::Forms::PictureBox^  flag_bogbeard;
	private: System::Windows::Forms::PictureBox^  flag_lynwood;
	private: System::Windows::Forms::PictureBox^  flag_bot;
	private: System::Windows::Forms::PictureBox^  flag_teridax;
	private: System::Windows::Forms::PictureBox^  flag_firelord;
	private: System::Windows::Forms::PictureBox^  flag_lance;
	private: System::Windows::Forms::Label^  b_wizard_text;
	private: System::Windows::Forms::Button^  lvlup_hp;
	private: System::Windows::Forms::Button^  lvlup_speed;
	private: System::Windows::Forms::ToolTip^  mapInfo;
	private: System::Windows::Forms::Button^  exit;

	private: System::Windows::Forms::Button^  lvlup_dmg;
	protected: 

	private:
		//Here a few functions to help saving the game properly
		String^ levelToString( level s ) {
			if (s==NEWB) return "NEWB";
			else if(s==BOGBEARD) return "BOGBEARD";
			else if(s==LYNWOOD) return "LYNWOOD";
			else if(s==FIRELORD) return "FIRELORD";
			else if(s==TERIDAX) return "TERIDAX";
			else if(s==BOT) return "BOT";
			else if(s==LANCE) return "LANCE";
			else if(s==COMPLETE) return "COMPLETE";
			return "NEWB";
		}

		String^ skinToString(int skin)
		{
			switch(skin) {
			case 1 : {return "DEMENTOR"; break;}
			case 2 : {return "ALTAIR"; break;}
			case 3 : {return "FREEMAN"; break;}
			case 4 : {return "ASH"; break;}
			default : {return "DEMENTOR"; break;}
			}
		}

		String^ boolToString( bool arg ) {
			if(arg) return "1";
			return "0";
		}
		void savegame()
		{
			String^ path = "saves/";
			 path = path + gcnew System::String(p_name.c_str()) + ".txt";

			   // Delete the file if it exists.
			   if ( File::Exists( path ) )
			   {
				  File::Delete( path );
			   }

			   // Create the file.
			   FileStream^ fs = File::Create( path );
			   try
			   {
				   array<Byte>^info = (gcnew UTF8Encoding( true ))->GetBytes( "#name\n" + (gcnew System::String(p_name.c_str())) + "\n#skin\n" + skinToString(p_skin) + "\n#firststart\n" + boolToString(p_firststart) + "\n#level\n" + levelToString(p_level) + "\n#health\n" + System::Convert::ToString(p_health) + "\n#speed\n" + System::Convert::ToString(p_speed) + "\n#firepower\n" + System::Convert::ToString(p_firepower) + "\n#lvluppoints\n" + System::Convert::ToString(p_lvluppoints) );
				  fs->Write( info, 0, info->Length );
			   }
			   finally
			   {
				  if ( fs )
						delete (IDisposable^)fs;
			   }
		}
private: System::ComponentModel::IContainer^  components;


#pragma region Windows Form Designer generated code
		/// <summary>
		/// The following code was automatically generated by Visual Studio.
		/// </summary>
		void InitializeComponent(void)
		{
			this->components = (gcnew System::ComponentModel::Container());
			System::ComponentModel::ComponentResourceManager^  resources = (gcnew System::ComponentModel::ComponentResourceManager(chp_menu::typeid));
			this->bchp_start = (gcnew System::Windows::Forms::Button());
			this->player_displayname = (gcnew System::Windows::Forms::Label());
			this->player_displayskin = (gcnew System::Windows::Forms::PictureBox());
			this->dsp_spells = (gcnew System::Windows::Forms::Label());
			this->dsp_fly = (gcnew System::Windows::Forms::Label());
			this->dsp_nuke = (gcnew System::Windows::Forms::Label());
			this->dsp_createearth = (gcnew System::Windows::Forms::Label());
			this->dsp_stats = (gcnew System::Windows::Forms::Label());
			this->dsp_health = (gcnew System::Windows::Forms::Label());
			this->dsp_speed = (gcnew System::Windows::Forms::Label());
			this->dsp_dmg = (gcnew System::Windows::Forms::Label());
			this->dsp_completed = (gcnew System::Windows::Forms::Label());
			this->dsp_bogbeard = (gcnew System::Windows::Forms::Label());
			this->dsp_lynwood = (gcnew System::Windows::Forms::Label());
			this->dsp_firelord = (gcnew System::Windows::Forms::Label());
			this->dsp_teridax = (gcnew System::Windows::Forms::Label());
			this->dsp_bot = (gcnew System::Windows::Forms::Label());
			this->dsp_lance = (gcnew System::Windows::Forms::Label());
			this->dsp_next = (gcnew System::Windows::Forms::Label());
			this->dsp_name = (gcnew System::Windows::Forms::Label());
			this->dsp_map = (gcnew System::Windows::Forms::Label());
			this->dsp_dif = (gcnew System::Windows::Forms::Label());
			this->b_wizard = (gcnew System::Windows::Forms::PictureBox());
			this->flag_bogbeard = (gcnew System::Windows::Forms::PictureBox());
			this->flag_lynwood = (gcnew System::Windows::Forms::PictureBox());
			this->flag_bot = (gcnew System::Windows::Forms::PictureBox());
			this->flag_teridax = (gcnew System::Windows::Forms::PictureBox());
			this->flag_firelord = (gcnew System::Windows::Forms::PictureBox());
			this->flag_lance = (gcnew System::Windows::Forms::PictureBox());
			this->b_wizard_text = (gcnew System::Windows::Forms::Label());
			this->lvlup_hp = (gcnew System::Windows::Forms::Button());
			this->lvlup_speed = (gcnew System::Windows::Forms::Button());
			this->lvlup_dmg = (gcnew System::Windows::Forms::Button());
			this->mapInfo = (gcnew System::Windows::Forms::ToolTip(this->components));
			this->exit = (gcnew System::Windows::Forms::Button());
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->player_displayskin))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->b_wizard))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->flag_bogbeard))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->flag_lynwood))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->flag_bot))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->flag_teridax))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->flag_firelord))->BeginInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->flag_lance))->BeginInit();
			this->SuspendLayout();
			// 
			// bchp_start
			// 
			this->bchp_start->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(24)), static_cast<System::Int32>(static_cast<System::Byte>(24)), 
				static_cast<System::Int32>(static_cast<System::Byte>(24)));
			this->bchp_start->FlatAppearance->BorderColor = System::Drawing::Color::Red;
			this->bchp_start->FlatAppearance->MouseDownBackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(64)), 
				static_cast<System::Int32>(static_cast<System::Byte>(0)), static_cast<System::Int32>(static_cast<System::Byte>(0)));
			this->bchp_start->FlatAppearance->MouseOverBackColor = System::Drawing::Color::Black;
			this->bchp_start->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
			this->bchp_start->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 14.25F, static_cast<System::Drawing::FontStyle>((System::Drawing::FontStyle::Bold | System::Drawing::FontStyle::Italic)), 
				System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->bchp_start->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(192)), static_cast<System::Int32>(static_cast<System::Byte>(0)), 
				static_cast<System::Int32>(static_cast<System::Byte>(0)));
			this->bchp_start->Location = System::Drawing::Point(21, 804);
			this->bchp_start->Name = L"bchp_start";
			this->bchp_start->Size = System::Drawing::Size(183, 52);
			this->bchp_start->TabIndex = 0;
			this->bchp_start->Text = L"Start next match!";
			this->bchp_start->UseVisualStyleBackColor = false;
			this->bchp_start->Click += gcnew System::EventHandler(this, &chp_menu::bchp_start_Click);
			// 
			// player_displayname
			// 
			this->player_displayname->AutoSize = true;
			this->player_displayname->BackColor = System::Drawing::Color::Transparent;
			this->player_displayname->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 15.75F, static_cast<System::Drawing::FontStyle>((System::Drawing::FontStyle::Bold | System::Drawing::FontStyle::Italic)), 
				System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->player_displayname->ForeColor = System::Drawing::Color::White;
			this->player_displayname->Location = System::Drawing::Point(15, 204);
			this->player_displayname->Name = L"player_displayname";
			this->player_displayname->Size = System::Drawing::Size(235, 25);
			this->player_displayname->TabIndex = 1;
			this->player_displayname->Text = L"#player_displayname";
			// 
			// player_displayskin
			// 
			this->player_displayskin->BackColor = System::Drawing::Color::Transparent;
			this->player_displayskin->Location = System::Drawing::Point(12, 11);
			this->player_displayskin->Name = L"player_displayskin";
			this->player_displayskin->Size = System::Drawing::Size(160, 190);
			this->player_displayskin->TabIndex = 2;
			this->player_displayskin->TabStop = false;
			// 
			// dsp_spells
			// 
			this->dsp_spells->AutoSize = true;
			this->dsp_spells->BackColor = System::Drawing::Color::Transparent;
			this->dsp_spells->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 14.25F, static_cast<System::Drawing::FontStyle>(((System::Drawing::FontStyle::Bold | System::Drawing::FontStyle::Italic) 
				| System::Drawing::FontStyle::Underline)), System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->dsp_spells->ForeColor = System::Drawing::Color::Silver;
			this->dsp_spells->Location = System::Drawing::Point(185, 11);
			this->dsp_spells->Name = L"dsp_spells";
			this->dsp_spells->Size = System::Drawing::Size(73, 24);
			this->dsp_spells->TabIndex = 3;
			this->dsp_spells->Text = L"Spells:";
			// 
			// dsp_fly
			// 
			this->dsp_fly->AutoSize = true;
			this->dsp_fly->BackColor = System::Drawing::Color::Transparent;
			this->dsp_fly->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 14.25F, static_cast<System::Drawing::FontStyle>((System::Drawing::FontStyle::Bold | System::Drawing::FontStyle::Italic)), 
				System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->dsp_fly->ForeColor = System::Drawing::Color::Gray;
			this->dsp_fly->Location = System::Drawing::Point(185, 41);
			this->dsp_fly->Name = L"dsp_fly";
			this->dsp_fly->Size = System::Drawing::Size(38, 24);
			this->dsp_fly->TabIndex = 5;
			this->dsp_fly->Text = L"Fly";
			this->dsp_fly->Visible = false;
			// 
			// dsp_nuke
			// 
			this->dsp_nuke->AutoSize = true;
			this->dsp_nuke->BackColor = System::Drawing::Color::Transparent;
			this->dsp_nuke->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 14.25F, static_cast<System::Drawing::FontStyle>((System::Drawing::FontStyle::Bold | System::Drawing::FontStyle::Italic)), 
				System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->dsp_nuke->ForeColor = System::Drawing::Color::Gray;
			this->dsp_nuke->Location = System::Drawing::Point(186, 71);
			this->dsp_nuke->Name = L"dsp_nuke";
			this->dsp_nuke->Size = System::Drawing::Size(59, 24);
			this->dsp_nuke->TabIndex = 6;
			this->dsp_nuke->Text = L"Nuke";
			this->dsp_nuke->Visible = false;
			// 
			// dsp_createearth
			// 
			this->dsp_createearth->AutoSize = true;
			this->dsp_createearth->BackColor = System::Drawing::Color::Transparent;
			this->dsp_createearth->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 14.25F, static_cast<System::Drawing::FontStyle>((System::Drawing::FontStyle::Bold | System::Drawing::FontStyle::Italic)), 
				System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->dsp_createearth->ForeColor = System::Drawing::Color::Gray;
			this->dsp_createearth->Location = System::Drawing::Point(186, 101);
			this->dsp_createearth->Name = L"dsp_createearth";
			this->dsp_createearth->Size = System::Drawing::Size(146, 24);
			this->dsp_createearth->TabIndex = 7;
			this->dsp_createearth->Text = L"Summon earth";
			this->dsp_createearth->Visible = false;
			// 
			// dsp_stats
			// 
			this->dsp_stats->AutoSize = true;
			this->dsp_stats->BackColor = System::Drawing::Color::Transparent;
			this->dsp_stats->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 14.25F, static_cast<System::Drawing::FontStyle>(((System::Drawing::FontStyle::Bold | System::Drawing::FontStyle::Italic) 
				| System::Drawing::FontStyle::Underline)), System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->dsp_stats->ForeColor = System::Drawing::Color::Green;
			this->dsp_stats->Location = System::Drawing::Point(672, 14);
			this->dsp_stats->Name = L"dsp_stats";
			this->dsp_stats->Size = System::Drawing::Size(54, 24);
			this->dsp_stats->TabIndex = 9;
			this->dsp_stats->Text = L"Stats";
			// 
			// dsp_health
			// 
			this->dsp_health->AutoSize = true;
			this->dsp_health->BackColor = System::Drawing::Color::Transparent;
			this->dsp_health->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 14.25F, static_cast<System::Drawing::FontStyle>((System::Drawing::FontStyle::Bold | System::Drawing::FontStyle::Italic)), 
				System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->dsp_health->Location = System::Drawing::Point(674, 53);
			this->dsp_health->Name = L"dsp_health";
			this->dsp_health->Size = System::Drawing::Size(70, 24);
			this->dsp_health->TabIndex = 10;
			this->dsp_health->Text = L"Health";
			// 
			// dsp_speed
			// 
			this->dsp_speed->AutoSize = true;
			this->dsp_speed->BackColor = System::Drawing::Color::Transparent;
			this->dsp_speed->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 14.25F, static_cast<System::Drawing::FontStyle>((System::Drawing::FontStyle::Bold | System::Drawing::FontStyle::Italic)), 
				System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->dsp_speed->Location = System::Drawing::Point(674, 78);
			this->dsp_speed->Name = L"dsp_speed";
			this->dsp_speed->Size = System::Drawing::Size(71, 24);
			this->dsp_speed->TabIndex = 12;
			this->dsp_speed->Text = L"Speed";
			// 
			// dsp_dmg
			// 
			this->dsp_dmg->AutoSize = true;
			this->dsp_dmg->BackColor = System::Drawing::Color::Transparent;
			this->dsp_dmg->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 14.25F, static_cast<System::Drawing::FontStyle>((System::Drawing::FontStyle::Bold | System::Drawing::FontStyle::Italic)), 
				System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->dsp_dmg->Location = System::Drawing::Point(674, 109);
			this->dsp_dmg->Name = L"dsp_dmg";
			this->dsp_dmg->Size = System::Drawing::Size(87, 24);
			this->dsp_dmg->TabIndex = 13;
			this->dsp_dmg->Text = L"Damage";
			// 
			// dsp_completed
			// 
			this->dsp_completed->AutoSize = true;
			this->dsp_completed->BackColor = System::Drawing::Color::Transparent;
			this->dsp_completed->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 14.25F, static_cast<System::Drawing::FontStyle>((System::Drawing::FontStyle::Bold | System::Drawing::FontStyle::Underline)), 
				System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->dsp_completed->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(32)), static_cast<System::Int32>(static_cast<System::Byte>(64)), 
				static_cast<System::Int32>(static_cast<System::Byte>(32)));
			this->dsp_completed->Location = System::Drawing::Point(30, 300);
			this->dsp_completed->Name = L"dsp_completed";
			this->dsp_completed->Size = System::Drawing::Size(117, 24);
			this->dsp_completed->TabIndex = 15;
			this->dsp_completed->Text = L"Completed:";
			// 
			// dsp_bogbeard
			// 
			this->dsp_bogbeard->AutoSize = true;
			this->dsp_bogbeard->BackColor = System::Drawing::Color::Transparent;
			this->dsp_bogbeard->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 12, static_cast<System::Drawing::FontStyle>((System::Drawing::FontStyle::Bold | System::Drawing::FontStyle::Italic)), 
				System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->dsp_bogbeard->ForeColor = System::Drawing::Color::Red;
			this->dsp_bogbeard->Location = System::Drawing::Point(30, 333);
			this->dsp_bogbeard->Name = L"dsp_bogbeard";
			this->dsp_bogbeard->Size = System::Drawing::Size(87, 20);
			this->dsp_bogbeard->TabIndex = 16;
			this->dsp_bogbeard->Text = L"Bogbeard";
			// 
			// dsp_lynwood
			// 
			this->dsp_lynwood->AutoSize = true;
			this->dsp_lynwood->BackColor = System::Drawing::Color::Transparent;
			this->dsp_lynwood->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 12, static_cast<System::Drawing::FontStyle>((System::Drawing::FontStyle::Bold | System::Drawing::FontStyle::Italic)), 
				System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->dsp_lynwood->ForeColor = System::Drawing::Color::Red;
			this->dsp_lynwood->Location = System::Drawing::Point(30, 365);
			this->dsp_lynwood->Name = L"dsp_lynwood";
			this->dsp_lynwood->Size = System::Drawing::Size(79, 20);
			this->dsp_lynwood->TabIndex = 17;
			this->dsp_lynwood->Text = L"Lynwood";
			// 
			// dsp_firelord
			// 
			this->dsp_firelord->AutoSize = true;
			this->dsp_firelord->BackColor = System::Drawing::Color::Transparent;
			this->dsp_firelord->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 12, static_cast<System::Drawing::FontStyle>((System::Drawing::FontStyle::Bold | System::Drawing::FontStyle::Italic)), 
				System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->dsp_firelord->ForeColor = System::Drawing::Color::Red;
			this->dsp_firelord->Location = System::Drawing::Point(30, 394);
			this->dsp_firelord->Name = L"dsp_firelord";
			this->dsp_firelord->Size = System::Drawing::Size(54, 20);
			this->dsp_firelord->TabIndex = 18;
			this->dsp_firelord->Text = L"Zydar";
			// 
			// dsp_teridax
			// 
			this->dsp_teridax->AutoSize = true;
			this->dsp_teridax->BackColor = System::Drawing::Color::Transparent;
			this->dsp_teridax->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 12, static_cast<System::Drawing::FontStyle>((System::Drawing::FontStyle::Bold | System::Drawing::FontStyle::Italic)), 
				System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->dsp_teridax->ForeColor = System::Drawing::Color::Red;
			this->dsp_teridax->Location = System::Drawing::Point(30, 428);
			this->dsp_teridax->Name = L"dsp_teridax";
			this->dsp_teridax->Size = System::Drawing::Size(67, 20);
			this->dsp_teridax->TabIndex = 19;
			this->dsp_teridax->Text = L"Teridax";
			// 
			// dsp_bot
			// 
			this->dsp_bot->AutoSize = true;
			this->dsp_bot->BackColor = System::Drawing::Color::Transparent;
			this->dsp_bot->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 12, static_cast<System::Drawing::FontStyle>((System::Drawing::FontStyle::Bold | System::Drawing::FontStyle::Italic)), 
				System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->dsp_bot->ForeColor = System::Drawing::Color::Red;
			this->dsp_bot->Location = System::Drawing::Point(30, 461);
			this->dsp_bot->Name = L"dsp_bot";
			this->dsp_bot->Size = System::Drawing::Size(90, 20);
			this->dsp_bot->TabIndex = 20;
			this->dsp_bot->Text = L"THS-1338";
			// 
			// dsp_lance
			// 
			this->dsp_lance->AutoSize = true;
			this->dsp_lance->BackColor = System::Drawing::Color::Transparent;
			this->dsp_lance->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 12, static_cast<System::Drawing::FontStyle>((System::Drawing::FontStyle::Bold | System::Drawing::FontStyle::Italic)), 
				System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->dsp_lance->ForeColor = System::Drawing::Color::Red;
			this->dsp_lance->Location = System::Drawing::Point(30, 493);
			this->dsp_lance->Name = L"dsp_lance";
			this->dsp_lance->Size = System::Drawing::Size(58, 20);
			this->dsp_lance->TabIndex = 21;
			this->dsp_lance->Text = L"Lance";
			// 
			// dsp_next
			// 
			this->dsp_next->AutoSize = true;
			this->dsp_next->BackColor = System::Drawing::Color::Transparent;
			this->dsp_next->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 14.25F, static_cast<System::Drawing::FontStyle>(((System::Drawing::FontStyle::Bold | System::Drawing::FontStyle::Italic) 
				| System::Drawing::FontStyle::Underline)), System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->dsp_next->ForeColor = System::Drawing::Color::Silver;
			this->dsp_next->Location = System::Drawing::Point(30, 622);
			this->dsp_next->Name = L"dsp_next";
			this->dsp_next->Size = System::Drawing::Size(201, 24);
			this->dsp_next->TabIndex = 22;
			this->dsp_next->Text = L"Your next opponent:";
			// 
			// dsp_name
			// 
			this->dsp_name->AutoSize = true;
			this->dsp_name->BackColor = System::Drawing::Color::Transparent;
			this->dsp_name->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 14.25F, static_cast<System::Drawing::FontStyle>((System::Drawing::FontStyle::Bold | System::Drawing::FontStyle::Italic)), 
				System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->dsp_name->ForeColor = System::Drawing::Color::Gray;
			this->dsp_name->Location = System::Drawing::Point(30, 656);
			this->dsp_name->Name = L"dsp_name";
			this->dsp_name->Size = System::Drawing::Size(77, 24);
			this->dsp_name->TabIndex = 23;
			this->dsp_name->Text = L"Name: ";
			// 
			// dsp_map
			// 
			this->dsp_map->AutoSize = true;
			this->dsp_map->BackColor = System::Drawing::Color::Transparent;
			this->dsp_map->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 14.25F, static_cast<System::Drawing::FontStyle>((System::Drawing::FontStyle::Bold | System::Drawing::FontStyle::Italic)), 
				System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->dsp_map->ForeColor = System::Drawing::Color::Gray;
			this->dsp_map->Location = System::Drawing::Point(30, 693);
			this->dsp_map->Name = L"dsp_map";
			this->dsp_map->Size = System::Drawing::Size(62, 24);
			this->dsp_map->TabIndex = 24;
			this->dsp_map->Text = L"Map: ";
			// 
			// dsp_dif
			// 
			this->dsp_dif->AutoSize = true;
			this->dsp_dif->BackColor = System::Drawing::Color::Transparent;
			this->dsp_dif->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 14.25F, static_cast<System::Drawing::FontStyle>((System::Drawing::FontStyle::Bold | System::Drawing::FontStyle::Italic)), 
				System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->dsp_dif->ForeColor = System::Drawing::Color::Gray;
			this->dsp_dif->Location = System::Drawing::Point(33, 730);
			this->dsp_dif->Name = L"dsp_dif";
			this->dsp_dif->Size = System::Drawing::Size(99, 24);
			this->dsp_dif->TabIndex = 25;
			this->dsp_dif->Text = L"Difficulty: ";
			// 
			// b_wizard
			// 
			this->b_wizard->BackColor = System::Drawing::Color::Transparent;
			this->b_wizard->Image = (cli::safe_cast<System::Drawing::Image^  >(resources->GetObject(L"b_wizard.Image")));
			this->b_wizard->Location = System::Drawing::Point(977, 585);
			this->b_wizard->Name = L"b_wizard";
			this->b_wizard->Size = System::Drawing::Size(280, 294);
			this->b_wizard->TabIndex = 26;
			this->b_wizard->TabStop = false;
			// 
			// flag_bogbeard
			// 
			this->flag_bogbeard->BackColor = System::Drawing::Color::Transparent;
			this->flag_bogbeard->Image = (cli::safe_cast<System::Drawing::Image^  >(resources->GetObject(L"flag_bogbeard.Image")));
			this->flag_bogbeard->Location = System::Drawing::Point(809, 480);
			this->flag_bogbeard->Name = L"flag_bogbeard";
			this->flag_bogbeard->Size = System::Drawing::Size(61, 82);
			this->flag_bogbeard->TabIndex = 27;
			this->flag_bogbeard->TabStop = false;
			this->mapInfo->SetToolTip(this->flag_bogbeard, L"Sacred Forest:\r\nA rough area, difficult to navigate\r\ndue to being completly overg" 
				L"rown.");
			// 
			// flag_lynwood
			// 
			this->flag_lynwood->BackColor = System::Drawing::Color::Transparent;
			this->flag_lynwood->Image = (cli::safe_cast<System::Drawing::Image^  >(resources->GetObject(L"flag_lynwood.Image")));
			this->flag_lynwood->Location = System::Drawing::Point(936, 381);
			this->flag_lynwood->Name = L"flag_lynwood";
			this->flag_lynwood->Size = System::Drawing::Size(61, 82);
			this->flag_lynwood->TabIndex = 28;
			this->flag_lynwood->TabStop = false;
			this->mapInfo->SetToolTip(this->flag_lynwood, L"Enchanted Desert:\r\nA large, open area. The few\r\ndunes that can be found are\r\nnot " 
				L"steep. The layer of sand\r\nreaches deep into the ground.");
			// 
			// flag_bot
			// 
			this->flag_bot->BackColor = System::Drawing::Color::Transparent;
			this->flag_bot->Image = (cli::safe_cast<System::Drawing::Image^  >(resources->GetObject(L"flag_bot.Image")));
			this->flag_bot->Location = System::Drawing::Point(795, 325);
			this->flag_bot->Name = L"flag_bot";
			this->flag_bot->Size = System::Drawing::Size(61, 82);
			this->flag_bot->TabIndex = 29;
			this->flag_bot->TabStop = false;
			this->mapInfo->SetToolTip(this->flag_bot, L"Darksteam Citadel:\r\nThe main building of \r\nDarksteam city. A completely\r\nindustri" 
				L"al area stuffed with all\r\nsorts of crazy inventions.");
			// 
			// flag_teridax
			// 
			this->flag_teridax->BackColor = System::Drawing::Color::Transparent;
			this->flag_teridax->Image = (cli::safe_cast<System::Drawing::Image^  >(resources->GetObject(L"flag_teridax.Image")));
			this->flag_teridax->Location = System::Drawing::Point(283, 570);
			this->flag_teridax->Name = L"flag_teridax";
			this->flag_teridax->Size = System::Drawing::Size(61, 82);
			this->flag_teridax->TabIndex = 30;
			this->flag_teridax->TabStop = false;
			this->mapInfo->SetToolTip(this->flag_teridax, L"Crystal Caves:\r\nOnly hardly accessible through\r\na crevice at the surface, the cav" 
				L"es\r\nare dark, cold and not easy to \r\nnavigate, but include all sorts\r\nof valuabl" 
				L"e gems.");
			// 
			// flag_firelord
			// 
			this->flag_firelord->BackColor = System::Drawing::Color::Transparent;
			this->flag_firelord->Image = (cli::safe_cast<System::Drawing::Image^  >(resources->GetObject(L"flag_firelord.Image")));
			this->flag_firelord->Location = System::Drawing::Point(320, 381);
			this->flag_firelord->Name = L"flag_firelord";
			this->flag_firelord->Size = System::Drawing::Size(61, 82);
			this->flag_firelord->TabIndex = 31;
			this->flag_firelord->TabStop = false;
			this->mapInfo->SetToolTip(this->flag_firelord, L"Forsaken Mountain:\r\nAn extremly steep, active volcano.\r\nThe rouch surface is fill" 
				L"ed with dark\r\nrocks and obsidian.");
			// 
			// flag_lance
			// 
			this->flag_lance->BackColor = System::Drawing::Color::Transparent;
			this->flag_lance->Image = (cli::safe_cast<System::Drawing::Image^  >(resources->GetObject(L"flag_lance.Image")));
			this->flag_lance->Location = System::Drawing::Point(516, 253);
			this->flag_lance->Name = L"flag_lance";
			this->flag_lance->Size = System::Drawing::Size(61, 82);
			this->flag_lance->TabIndex = 32;
			this->flag_lance->TabStop = false;
			this->mapInfo->SetToolTip(this->flag_lance, L"Skinc Arena:\r\nExclusively built for the\r\ngreatest of warriors, this \r\narena is pe" 
				L"rfectly symmetrical\r\nto not give an unfair advantage\r\nto any of the both sides.");
			// 
			// b_wizard_text
			// 
			this->b_wizard_text->AutoSize = true;
			this->b_wizard_text->BackColor = System::Drawing::Color::Transparent;
			this->b_wizard_text->Font = (gcnew System::Drawing::Font(L"Calibri", 10, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(0)));
			this->b_wizard_text->Image = (cli::safe_cast<System::Drawing::Image^  >(resources->GetObject(L"b_wizard_text.Image")));
			this->b_wizard_text->ImageAlign = System::Drawing::ContentAlignment::TopLeft;
			this->b_wizard_text->Location = System::Drawing::Point(986, 394);
			this->b_wizard_text->Name = L"b_wizard_text";
			this->b_wizard_text->Size = System::Drawing::Size(271, 187);
			this->b_wizard_text->TabIndex = 33;
			this->b_wizard_text->Text = resources->GetString(L"b_wizard_text.Text");
			this->b_wizard_text->TextAlign = System::Drawing::ContentAlignment::MiddleLeft;
			// 
			// lvlup_hp
			// 
			this->lvlup_hp->BackColor = System::Drawing::Color::Black;
			this->lvlup_hp->FlatAppearance->MouseDownBackColor = System::Drawing::Color::Maroon;
			this->lvlup_hp->FlatAppearance->MouseOverBackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(64)), 
				static_cast<System::Int32>(static_cast<System::Byte>(0)), static_cast<System::Int32>(static_cast<System::Byte>(0)));
			this->lvlup_hp->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
			this->lvlup_hp->Image = (cli::safe_cast<System::Drawing::Image^  >(resources->GetObject(L"lvlup_hp.Image")));
			this->lvlup_hp->Location = System::Drawing::Point(634, 53);
			this->lvlup_hp->Name = L"lvlup_hp";
			this->lvlup_hp->Size = System::Drawing::Size(45, 25);
			this->lvlup_hp->TabIndex = 34;
			this->lvlup_hp->UseVisualStyleBackColor = false;
			this->lvlup_hp->Visible = false;
			this->lvlup_hp->Click += gcnew System::EventHandler(this, &chp_menu::lvlup_hp_Click);
			// 
			// lvlup_speed
			// 
			this->lvlup_speed->BackColor = System::Drawing::Color::Black;
			this->lvlup_speed->FlatAppearance->MouseDownBackColor = System::Drawing::Color::Maroon;
			this->lvlup_speed->FlatAppearance->MouseOverBackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(64)), 
				static_cast<System::Int32>(static_cast<System::Byte>(0)), static_cast<System::Int32>(static_cast<System::Byte>(0)));
			this->lvlup_speed->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
			this->lvlup_speed->Image = (cli::safe_cast<System::Drawing::Image^  >(resources->GetObject(L"lvlup_speed.Image")));
			this->lvlup_speed->Location = System::Drawing::Point(634, 83);
			this->lvlup_speed->Name = L"lvlup_speed";
			this->lvlup_speed->Size = System::Drawing::Size(45, 25);
			this->lvlup_speed->TabIndex = 35;
			this->lvlup_speed->UseVisualStyleBackColor = false;
			this->lvlup_speed->Visible = false;
			this->lvlup_speed->Click += gcnew System::EventHandler(this, &chp_menu::lvlup_speed_Click);
			// 
			// lvlup_dmg
			// 
			this->lvlup_dmg->BackColor = System::Drawing::Color::Black;
			this->lvlup_dmg->FlatAppearance->MouseDownBackColor = System::Drawing::Color::Maroon;
			this->lvlup_dmg->FlatAppearance->MouseOverBackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(64)), 
				static_cast<System::Int32>(static_cast<System::Byte>(0)), static_cast<System::Int32>(static_cast<System::Byte>(0)));
			this->lvlup_dmg->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
			this->lvlup_dmg->Image = (cli::safe_cast<System::Drawing::Image^  >(resources->GetObject(L"lvlup_dmg.Image")));
			this->lvlup_dmg->Location = System::Drawing::Point(634, 112);
			this->lvlup_dmg->Name = L"lvlup_dmg";
			this->lvlup_dmg->Size = System::Drawing::Size(45, 25);
			this->lvlup_dmg->TabIndex = 36;
			this->lvlup_dmg->UseVisualStyleBackColor = false;
			this->lvlup_dmg->Visible = false;
			this->lvlup_dmg->Click += gcnew System::EventHandler(this, &chp_menu::lvlup_dmg_Click);
			// 
			// exit
			// 
			this->exit->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(24)), static_cast<System::Int32>(static_cast<System::Byte>(24)), 
				static_cast<System::Int32>(static_cast<System::Byte>(24)));
			this->exit->FlatAppearance->BorderColor = System::Drawing::Color::Red;
			this->exit->FlatAppearance->MouseDownBackColor = System::Drawing::Color::Maroon;
			this->exit->FlatAppearance->MouseOverBackColor = System::Drawing::Color::Black;
			this->exit->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
			this->exit->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 14.25F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(0)));
			this->exit->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(192)), static_cast<System::Int32>(static_cast<System::Byte>(0)), 
				static_cast<System::Int32>(static_cast<System::Byte>(0)));
			this->exit->Location = System::Drawing::Point(1231, 14);
			this->exit->Name = L"exit";
			this->exit->Size = System::Drawing::Size(35, 32);
			this->exit->TabIndex = 37;
			this->exit->Text = L"X";
			this->exit->UseVisualStyleBackColor = false;
			this->exit->Click += gcnew System::EventHandler(this, &chp_menu::exit_Click);
			// 
			// chp_menu
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(6, 13);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->BackgroundImage = (cli::safe_cast<System::Drawing::Image^  >(resources->GetObject(L"$this.BackgroundImage")));
			this->ClientSize = System::Drawing::Size(1280, 924);
			this->Controls->Add(this->exit);
			this->Controls->Add(this->lvlup_dmg);
			this->Controls->Add(this->lvlup_speed);
			this->Controls->Add(this->lvlup_hp);
			this->Controls->Add(this->b_wizard_text);
			this->Controls->Add(this->flag_lance);
			this->Controls->Add(this->flag_firelord);
			this->Controls->Add(this->flag_teridax);
			this->Controls->Add(this->flag_bot);
			this->Controls->Add(this->flag_lynwood);
			this->Controls->Add(this->flag_bogbeard);
			this->Controls->Add(this->b_wizard);
			this->Controls->Add(this->dsp_dif);
			this->Controls->Add(this->dsp_map);
			this->Controls->Add(this->dsp_name);
			this->Controls->Add(this->dsp_next);
			this->Controls->Add(this->dsp_lance);
			this->Controls->Add(this->dsp_bot);
			this->Controls->Add(this->dsp_teridax);
			this->Controls->Add(this->dsp_firelord);
			this->Controls->Add(this->dsp_lynwood);
			this->Controls->Add(this->dsp_bogbeard);
			this->Controls->Add(this->dsp_completed);
			this->Controls->Add(this->dsp_dmg);
			this->Controls->Add(this->dsp_speed);
			this->Controls->Add(this->dsp_health);
			this->Controls->Add(this->dsp_stats);
			this->Controls->Add(this->dsp_createearth);
			this->Controls->Add(this->dsp_nuke);
			this->Controls->Add(this->dsp_fly);
			this->Controls->Add(this->dsp_spells);
			this->Controls->Add(this->player_displayskin);
			this->Controls->Add(this->player_displayname);
			this->Controls->Add(this->bchp_start);
			this->FormBorderStyle = System::Windows::Forms::FormBorderStyle::None;
			this->Icon = (cli::safe_cast<System::Drawing::Icon^  >(resources->GetObject(L"$this.Icon")));
			this->KeyPreview = true;
			this->MaximumSize = System::Drawing::Size(1280, 924);
			this->MinimumSize = System::Drawing::Size(1280, 924);
			this->Name = L"chp_menu";
			this->StartPosition = System::Windows::Forms::FormStartPosition::CenterScreen;
			this->Text = L"chp_menu";
			this->FormClosed += gcnew System::Windows::Forms::FormClosedEventHandler(this, &chp_menu::chp_menu_Close);
			this->Load += gcnew System::EventHandler(this, &chp_menu::chp_menu_Load);
			this->KeyDown += gcnew System::Windows::Forms::KeyEventHandler(this, &chp_menu::chp_menu_KeyDown);
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->player_displayskin))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->b_wizard))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->flag_bogbeard))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->flag_lynwood))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->flag_bot))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->flag_teridax))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->flag_firelord))->EndInit();
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->flag_lance))->EndInit();
			this->ResumeLayout(false);
			this->PerformLayout();

		}
#pragma endregion
	private: System::Void bchp_start_Click(System::Object^  sender, System::EventArgs^  e) {
				 nextwindow=LOADING;
				 //Set the map of the next game depending on player-level
				 switch (p_level){
				 case NEWB : {p_level=BOGBEARD; nextwindow=MAIN; break;}
				 case BOGBEARD : {g_map=FOREST; break;}
				 case LYNWOOD : {g_map=DESERT; break;}
				 case FIRELORD : {g_map=VOLCANO; break;}
				 case TERIDAX : {g_map=CRYSTAL; break;}
				 case BOT : {g_map=INDUSTRIAL; break;}
				 case LANCE : {g_map=ARENA; break;}
				 case COMPLETE : {nextwindow=MAIN; break;}
				 default : {nextwindow=MAIN; break;}
				 }
				 this->Close();
			 }
	private: System::Void chp_menu_Load(System::Object^  sender, System::EventArgs^  e) {
				 //Tutorial messages:
				 if(p_level==NEWB) {p_level=BOGBEARD; b_wizard_text->Text = "  Welcome to the Championship!                   .   \n   To become the champion you will have to   \n   defeat six different enemies in their\n  corresponding parts of the island.\n  The six challenges are marked on your\n  map with flags. Hover over the flags for\n  more information about the areas.\n  The orange flag marks your next challenge!\n   Good luck!\n\n\n";}
				 else if(p_level==LYNWOOD) {b_wizard_text->Text = "  Outstanding!                   .   \n   You defeated your first opponent!   \n   As you can see, you have unlocked\n  the spell 'Fly'!\n  For winning you may also upgrade either\n  your health, swiftness or damage!\n  These stats will also passively\n  increase as you keep advancing.\n   Good luck with your next opponent!\n\n\n";}
				 else if(p_level==TERIDAX) {b_wizard_text->Text = "  I see you are doing really well!   \n   However, there have been some bad   \n   rumors about your next contestant.\n  Appearantly he has embraced the dark\n  arts of cheating.\n  I've heard he can teleport, drain your health\n  and even turn invisible!\n  It seems the only way to defeat him\n   is to do it as quickly as possible!\n\n\n";}
				 else if(p_level==COMPLETE) {b_wizard_text->Text = "  Unbelievable!   \n   We have a new champion!   \n   Despite the many hazards you had\n  to face, you didn't surrender.\n  You have become more powerful\n  than I ever could have imagined! \n  I am really impressed!\n  I wish you the best of luck in\n   your future adventures and journeys!\n\n\n";}
				 else {
					 b_wizard_text->Visible=false;
					 b_wizard->Visible=false;
				 }

				 //Displaye playername
				 this->player_displayname->Text=gcnew String(p_name.c_str());

				 //Set up all the flags, spells text etc. depending on player leve.
				 if(p_level>BOGBEARD) {
					 dsp_fly->Visible=true;
					 dsp_bogbeard->ForeColor=System::Drawing::Color::Green;
					 flag_bogbeard->Load("menuresource/flag_complete.png");
				 }
				 else if(p_level==BOGBEARD) {flag_bogbeard->Load("menuresource/flag_current.png"); dsp_name->Text=L"Name: Reiny Bogbeard"; dsp_map->Text=L"Map: Sacred Forest"; dsp_dif->Text=L"Difficulty: Standard";}
				 //else flag_bogbeard->Load("menuresource/flag_uncomplete.png");
				 if(p_level>LYNWOOD) {
					 dsp_nuke->Visible=true;
					 dsp_lynwood->ForeColor=System::Drawing::Color::Green;
					 flag_lynwood->Load("menuresource/flag_complete.png");
				 }
				 else if(p_level==LYNWOOD) {flag_lynwood->Load("menuresource/flag_current.png"); dsp_name->Text=L"Name: Captain Lynwood"; dsp_map->Text=L"Map: Enchanted Desert"; dsp_dif->Text=L"Difficulty: Medium";}
				 //else flag_lynwood->Load("menuresource/flag_uncomplete.png");
				 if(p_level>FIRELORD) {
					 dsp_createearth->Visible=true;
					 dsp_firelord->ForeColor=System::Drawing::Color::Green;
					 flag_firelord->Load("menuresource/flag_complete.png");
				 }
				 else if(p_level==FIRELORD) {flag_firelord->Load("menuresource/flag_current.png"); dsp_name->Text=L"Name: Zydar the Firelord"; dsp_map->Text=L"Map: Forsaken Mountain"; dsp_dif->Text=L"Difficulty: Medium";}
				 //else flag_firelord->Load("menuresource/flag_uncomplete.png");
				 if(p_level>TERIDAX) {
					 dsp_teridax->ForeColor=System::Drawing::Color::Green;
					 flag_teridax->Load("menuresource/flag_complete.png");
				 }
				 else if(p_level==TERIDAX) {flag_teridax->Load("menuresource/flag_current.png"); dsp_name->Text=L"Name: Nadir Teridax"; dsp_map->Text=L"Map: Crystal Caves"; dsp_dif->Text=L"Difficulty: Cheating";}
				 //else flag_teridax->Load("menuresource/flag_uncomplete.png");
				 if(p_level>BOT) {
					 dsp_bot->ForeColor=System::Drawing::Color::Green;
					 flag_bot->Load("menuresource/flag_complete.png");
				 }
				 else if(p_level==BOT) {flag_bot->Load("menuresource/flag_current.png"); dsp_name->Text=L"Name: Project THS-1338"; dsp_map->Text=L"Map: Darksteam Citadel"; dsp_dif->Text=L"Difficulty: Hard";}
				 //else flag_bot->Load("menuresource/flag_uncomplete.png");
				 if(p_level>LANCE) {
					 dsp_lance->ForeColor=System::Drawing::Color::Green;
					 flag_lance->Load("menuresource/flag_complete.png");
				 }
				 else if(p_level==LANCE) {flag_lance->Load("menuresource/flag_current.png"); dsp_name->Text=L"Name: Lance"; dsp_map->Text=L"Map: Skinc Arena"; dsp_dif->Text=L"Difficulty: Merciless";}
				 //else flag_lance->Load("menuresource/flag_uncomplete.png");
				 if(p_level==COMPLETE) {dsp_next->Visible=false; dsp_name->Visible=false; dsp_map->Visible=false; dsp_dif->Visible=false; bchp_start->Enabled=false;}
				 
				 //Displaye player skin:
				 switch(p_skin) {
				 case DEMENTOR : {this->player_displayskin->Load("menuresource/splash_dementor.png"); break;}
				 case ALTAIR : {this->player_displayskin->Load("menuresource/splash_altair.png"); break;}
				 case FREEMAN : {this->player_displayskin->Load("menuresource/splash_freeman.png"); break;}
				 case ASH : {this->player_displayskin->Load("menuresource/splash_ash.png"); break;}
				 default : {this->player_displayskin->Load("menuresource/splash_dementor.png"); break;}
				 }

				 //Display player stats:
				 dsp_health->Text = "Health: "+p_health;
				 dsp_speed->Text = "Speed: "+p_speed;
				 dsp_dmg->Text = "Damage: "+p_firepower;
				 //Display lvl-up buttons
				 if(p_lvluppoints>0) {lvlup_hp->Visible=true; lvlup_dmg->Visible=true; lvlup_speed->Visible=true;}
			 }
private: System::Void lvlup_hp_Click(System::Object^  sender, System::EventArgs^  e) {
			 p_health += 150;
			 dsp_health->Text = "Health: "+p_health;
			 p_lvluppoints--;
			 if(p_lvluppoints<=0) {lvlup_hp->Visible=false; lvlup_dmg->Visible=false; lvlup_speed->Visible=false;}
		 }
private: System::Void lvlup_speed_Click(System::Object^  sender, System::EventArgs^  e) {
			 p_speed += 200;
			 dsp_speed->Text = "Speed: "+p_speed;
			 p_lvluppoints--;
			 if(p_lvluppoints<=0) {lvlup_hp->Visible=false; lvlup_dmg->Visible=false; lvlup_speed->Visible=false;}
		 }
private: System::Void lvlup_dmg_Click(System::Object^  sender, System::EventArgs^  e) {
			 p_firepower += 10;
			 dsp_dmg->Text = "Damage: "+p_firepower;
			 p_lvluppoints--;
			 if(p_lvluppoints<=0) {lvlup_hp->Visible=false; lvlup_dmg->Visible=false; lvlup_speed->Visible=false;}
		 }
private: System::Void chp_menu_Close(System::Object^  sender, System::Windows::Forms::FormClosedEventArgs^  e) {
			 //save game each time this window is closed.
			 savegame();
		 }
private: System::Void exit_Click(System::Object^  sender, System::EventArgs^  e) {
			 this->Close();
		 }
private: System::Void chp_menu_KeyDown(System::Object^  sender, System::Windows::Forms::KeyEventArgs^  e) {
			 if(e->KeyCode == Keys::M){
				 std::cout<<"Changing FormBorderStyle"<<std::endl;
				 if(this->FormBorderStyle == System::Windows::Forms::FormBorderStyle::Sizable) this->FormBorderStyle = System::Windows::Forms::FormBorderStyle::None;
				 else this->FormBorderStyle = System::Windows::Forms::FormBorderStyle::Sizable;
			 }
		 }
};
}
