#pragma once

#include "global_values.h"
#include "loaded_profile.h"
#include <iostream>
#include <fstream>

namespace SkincReborn {

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;
	using namespace System::IO;
	using namespace System::Text;

	/// <summary>
	/// This is the profile-menu
	/// </summary>
	public ref class profile_menu : public System::Windows::Forms::Form
	{
	public:
		profile_menu(void)
		{
			InitializeComponent();
		}

	protected:
		~profile_menu()
		{
			if (components)
			{
				delete components;
			}
		}
	private: System::Windows::Forms::PictureBox^  skin_display;
	private: System::Windows::Forms::Label^  skin_name;
	private: System::Windows::Forms::Button^  b_next;
	private: System::Windows::Forms::Button^  b_prev;
	protected: 

	protected: 



	private: System::Windows::Forms::ListBox^  saved_games;


	private: System::Windows::Forms::MaskedTextBox^  new_name;


	private: System::Windows::Forms::Button^  pb_start;
	private: System::Windows::Forms::RadioButton^  check_new;
	private: System::Windows::Forms::Label^  label1;
	private: System::Windows::Forms::Label^  label2;
	private: System::Windows::Forms::RadioButton^  check_old;




	private:
		//Functions to help load an old game or create a new one.
		bool ToBool( String^ s ) {
			if(s=="True" || s=="1") return true;
			return false;
		}
		skintype ToSkin( String^ s) {
			if(s=="DEMENTOR") return DEMENTOR;
			else if(s=="ALTAIR") return ALTAIR;
			else if(s=="FREEMAN") return FREEMAN;
			else if(s=="ASH") return ASH;
			return DEMENTOR;
		}
		level ToLevel( String^ s) {
			if (s=="NEWB") return NEWB;
			else if(s=="BOGBEARD") return BOGBEARD;
			else if(s=="LYNWOOD") return LYNWOOD;
			else if(s=="FIRELORD") return FIRELORD;
			else if(s=="TERIDAX") return TERIDAX;
			else if(s=="BOT") return BOT;
			else if(s=="LANCE") return LANCE;
			else if(s=="COMPLETE") return COMPLETE;
			return NEWB;
		}

		int skinc;
		String^ skinToString(int skin)
		{
			switch(skin) {
			case 1 : {return "DEMENTOR"; break;}
			case 2 : {return "ALTAIR"; break;}
			case 3 : {return "FREEMAN"; break;}
			case 4 : {return "ASH"; break;}
			default : {return "DEMENTOR"; break;}
			}
		}

		void MarshalString ( String ^ s, std::string& os ) 
		{
		   using namespace Runtime::InteropServices;
		   const char* chars = 
		   (const char*)(Marshal::StringToHGlobalAnsi(s)).ToPointer();
		   os = chars;
		   Marshal::FreeHGlobal(IntPtr((void*)chars));
		}
		System::ComponentModel::Container ^components;

#pragma region Windows Form Designer generated code
		/// <summary>
		/// Following code was generated by Visual Studio:
		/// </summary>
		void InitializeComponent(void)
		{
			System::ComponentModel::ComponentResourceManager^  resources = (gcnew System::ComponentModel::ComponentResourceManager(profile_menu::typeid));
			this->skin_display = (gcnew System::Windows::Forms::PictureBox());
			this->skin_name = (gcnew System::Windows::Forms::Label());
			this->b_next = (gcnew System::Windows::Forms::Button());
			this->b_prev = (gcnew System::Windows::Forms::Button());
			this->saved_games = (gcnew System::Windows::Forms::ListBox());
			this->new_name = (gcnew System::Windows::Forms::MaskedTextBox());
			this->pb_start = (gcnew System::Windows::Forms::Button());
			this->check_new = (gcnew System::Windows::Forms::RadioButton());
			this->check_old = (gcnew System::Windows::Forms::RadioButton());
			this->label1 = (gcnew System::Windows::Forms::Label());
			this->label2 = (gcnew System::Windows::Forms::Label());
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->skin_display))->BeginInit();
			this->SuspendLayout();
			// 
			// skin_display
			// 
			this->skin_display->BackColor = System::Drawing::Color::Transparent;
			this->skin_display->Location = System::Drawing::Point(76, 32);
			this->skin_display->Name = L"skin_display";
			this->skin_display->Size = System::Drawing::Size(160, 190);
			this->skin_display->TabIndex = 0;
			this->skin_display->TabStop = false;
			// 
			// skin_name
			// 
			this->skin_name->AutoSize = true;
			this->skin_name->BackColor = System::Drawing::Color::Transparent;
			this->skin_name->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 14.25F, static_cast<System::Drawing::FontStyle>((System::Drawing::FontStyle::Bold | System::Drawing::FontStyle::Italic)), 
				System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->skin_name->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(192)), static_cast<System::Int32>(static_cast<System::Byte>(64)), 
				static_cast<System::Int32>(static_cast<System::Byte>(0)));
			this->skin_name->Location = System::Drawing::Point(102, 224);
			this->skin_name->Name = L"skin_name";
			this->skin_name->Size = System::Drawing::Size(111, 24);
			this->skin_name->TabIndex = 1;
			this->skin_name->Text = L"Skin Name";
			// 
			// b_next
			// 
			this->b_next->BackColor = System::Drawing::Color::Transparent;
			this->b_next->FlatAppearance->MouseDownBackColor = System::Drawing::Color::Black;
			this->b_next->FlatAppearance->MouseOverBackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(14)), 
				static_cast<System::Int32>(static_cast<System::Byte>(14)), static_cast<System::Int32>(static_cast<System::Byte>(14)));
			this->b_next->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
			this->b_next->Image = (cli::safe_cast<System::Drawing::Image^  >(resources->GetObject(L"b_next.Image")));
			this->b_next->Location = System::Drawing::Point(242, 84);
			this->b_next->Name = L"b_next";
			this->b_next->Size = System::Drawing::Size(69, 80);
			this->b_next->TabIndex = 2;
			this->b_next->UseVisualStyleBackColor = false;
			this->b_next->Click += gcnew System::EventHandler(this, &profile_menu::b_next_Click);
			// 
			// b_prev
			// 
			this->b_prev->BackColor = System::Drawing::Color::Transparent;
			this->b_prev->FlatAppearance->MouseDownBackColor = System::Drawing::Color::Black;
			this->b_prev->FlatAppearance->MouseOverBackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(14)), 
				static_cast<System::Int32>(static_cast<System::Byte>(14)), static_cast<System::Int32>(static_cast<System::Byte>(14)));
			this->b_prev->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
			this->b_prev->Image = (cli::safe_cast<System::Drawing::Image^  >(resources->GetObject(L"b_prev.Image")));
			this->b_prev->Location = System::Drawing::Point(1, 84);
			this->b_prev->Name = L"b_prev";
			this->b_prev->Size = System::Drawing::Size(69, 80);
			this->b_prev->TabIndex = 3;
			this->b_prev->UseVisualStyleBackColor = false;
			this->b_prev->Click += gcnew System::EventHandler(this, &profile_menu::b_prev_Click);
			// 
			// saved_games
			// 
			this->saved_games->BackColor = System::Drawing::Color::Black;
			this->saved_games->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->saved_games->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(0)));
			this->saved_games->ForeColor = System::Drawing::Color::Maroon;
			this->saved_games->FormattingEnabled = true;
			this->saved_games->ItemHeight = 15;
			this->saved_games->Location = System::Drawing::Point(333, 135);
			this->saved_games->Name = L"saved_games";
			this->saved_games->Size = System::Drawing::Size(390, 47);
			this->saved_games->TabIndex = 4;
			// 
			// new_name
			// 
			this->new_name->AsciiOnly = true;
			this->new_name->BackColor = System::Drawing::Color::Black;
			this->new_name->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->new_name->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 15.75F, System::Drawing::FontStyle::Italic, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(0)));
			this->new_name->ForeColor = System::Drawing::Color::Maroon;
			this->new_name->Location = System::Drawing::Point(333, 55);
			this->new_name->Name = L"new_name";
			this->new_name->Size = System::Drawing::Size(395, 31);
			this->new_name->TabIndex = 6;
			this->new_name->Text = L"Enter profile name";
			// 
			// pb_start
			// 
			this->pb_start->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(24)), static_cast<System::Int32>(static_cast<System::Byte>(24)), 
				static_cast<System::Int32>(static_cast<System::Byte>(24)));
			this->pb_start->FlatAppearance->BorderColor = System::Drawing::Color::Red;
			this->pb_start->FlatAppearance->MouseDownBackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(64)), 
				static_cast<System::Int32>(static_cast<System::Byte>(0)), static_cast<System::Int32>(static_cast<System::Byte>(0)));
			this->pb_start->FlatAppearance->MouseOverBackColor = System::Drawing::Color::Black;
			this->pb_start->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
			this->pb_start->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 12, static_cast<System::Drawing::FontStyle>((System::Drawing::FontStyle::Bold | System::Drawing::FontStyle::Italic)), 
				System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->pb_start->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(192)), static_cast<System::Int32>(static_cast<System::Byte>(0)), 
				static_cast<System::Int32>(static_cast<System::Byte>(0)));
			this->pb_start->Location = System::Drawing::Point(335, 196);
			this->pb_start->Name = L"pb_start";
			this->pb_start->Size = System::Drawing::Size(383, 30);
			this->pb_start->TabIndex = 8;
			this->pb_start->Text = L"Start!";
			this->pb_start->UseVisualStyleBackColor = false;
			this->pb_start->Click += gcnew System::EventHandler(this, &profile_menu::pb_start_Click);
			// 
			// check_new
			// 
			this->check_new->AutoSize = true;
			this->check_new->BackColor = System::Drawing::Color::Transparent;
			this->check_new->Checked = true;
			this->check_new->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 12, static_cast<System::Drawing::FontStyle>((System::Drawing::FontStyle::Bold | System::Drawing::FontStyle::Italic)), 
				System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->check_new->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(192)), static_cast<System::Int32>(static_cast<System::Byte>(0)), 
				static_cast<System::Int32>(static_cast<System::Byte>(0)));
			this->check_new->Location = System::Drawing::Point(339, 16);
			this->check_new->Name = L"check_new";
			this->check_new->Size = System::Drawing::Size(178, 24);
			this->check_new->TabIndex = 9;
			this->check_new->TabStop = true;
			this->check_new->Text = L"Create new profile:";
			this->check_new->UseVisualStyleBackColor = false;
			this->check_new->CheckedChanged += gcnew System::EventHandler(this, &profile_menu::check_new_CheckedChanged);
			// 
			// check_old
			// 
			this->check_old->AutoSize = true;
			this->check_old->BackColor = System::Drawing::Color::Transparent;
			this->check_old->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 12, static_cast<System::Drawing::FontStyle>((System::Drawing::FontStyle::Bold | System::Drawing::FontStyle::Italic)), 
				System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->check_old->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(192)), static_cast<System::Int32>(static_cast<System::Byte>(0)), 
				static_cast<System::Int32>(static_cast<System::Byte>(0)));
			this->check_old->Location = System::Drawing::Point(333, 100);
			this->check_old->Name = L"check_old";
			this->check_old->Size = System::Drawing::Size(193, 24);
			this->check_old->TabIndex = 10;
			this->check_old->Text = L"Load existing profile:";
			this->check_old->UseVisualStyleBackColor = false;
			// 
			// label1
			// 
			this->label1->AutoSize = true;
			this->label1->BackColor = System::Drawing::Color::Transparent;
			this->label1->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 14.25F, static_cast<System::Drawing::FontStyle>((System::Drawing::FontStyle::Bold | System::Drawing::FontStyle::Italic)), 
				System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(0)));
			this->label1->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(192)), static_cast<System::Int32>(static_cast<System::Byte>(0)), 
				static_cast<System::Int32>(static_cast<System::Byte>(0)));
			this->label1->Location = System::Drawing::Point(71, -1);
			this->label1->Name = L"label1";
			this->label1->Size = System::Drawing::Size(149, 24);
			this->label1->TabIndex = 11;
			this->label1->Text = L"Character skin:";
			// 
			// label2
			// 
			this->label2->AutoSize = true;
			this->label2->BackColor = System::Drawing::Color::Transparent;
			this->label2->ForeColor = System::Drawing::Color::Red;
			this->label2->Location = System::Drawing::Point(497, 239);
			this->label2->Name = L"label2";
			this->label2->Size = System::Drawing::Size(275, 13);
			this->label2->TabIndex = 12;
			this->label2->Text = L"While in menu, press [M] to move or minimize the window";
			// 
			// profile_menu
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(6, 13);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->BackgroundImage = (cli::safe_cast<System::Drawing::Image^  >(resources->GetObject(L"$this.BackgroundImage")));
			this->ClientSize = System::Drawing::Size(784, 261);
			this->Controls->Add(this->label2);
			this->Controls->Add(this->label1);
			this->Controls->Add(this->check_old);
			this->Controls->Add(this->check_new);
			this->Controls->Add(this->pb_start);
			this->Controls->Add(this->new_name);
			this->Controls->Add(this->saved_games);
			this->Controls->Add(this->b_prev);
			this->Controls->Add(this->b_next);
			this->Controls->Add(this->skin_name);
			this->Controls->Add(this->skin_display);
			this->Icon = (cli::safe_cast<System::Drawing::Icon^  >(resources->GetObject(L"$this.Icon")));
			this->MaximumSize = System::Drawing::Size(800, 300);
			this->MinimumSize = System::Drawing::Size(800, 300);
			this->Name = L"profile_menu";
			this->Text = L"Skinc Reborn - Profile";
			this->Load += gcnew System::EventHandler(this, &profile_menu::profile_menu_Load);
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->skin_display))->EndInit();
			this->ResumeLayout(false);
			this->PerformLayout();

		}
#pragma endregion
	private: System::Void profile_menu_Load(System::Object^  sender, System::EventArgs^  e) {
				 this->skinc=1;
				 this->skin_display->Load("menuresource/splash_dementor.png");
				 this->skin_name->Text="Dementor";
				 new_name->Enabled=true;
				 saved_games->Enabled=false;
				 b_next->Enabled=true;
				 b_prev->Enabled=true;

				 //Add existing profiles to listbox:
				 std::ifstream file("saves/@&profile_list.txt");
				 std::string str; 
				 while (std::getline(file, str))
				 {
					 this->saved_games->Items->Add(gcnew String(str.c_str()));
				 }
				 file.close();
			 }
private: System::Void pb_start_Click(System::Object^  sender, System::EventArgs^  e) {
			 //CREATE NEW PROFILE:
			 if(check_new->Checked)
			 {
			 String^ name = (this->new_name->Text) + ".txt";
			 String^ path = "saves/";
			 path = path + name;

			   // Delete the file if it exists.
			   if ( File::Exists( path ) )
			   {
				  File::Delete( path );
			   }

			   // Create the file.
			   FileStream^ fs = File::Create( path );
			   try
			   {
				   // Add preset information
				   array<Byte>^info = (gcnew UTF8Encoding( true ))->GetBytes( "#name\n" + this->new_name->Text + "\n#skin\n" + skinToString(this->skinc) + "\n#firststart\n1\n#level\nNEWB\n#health\n300\n#speed\n10000\n#firepower\n20\n#lvluppoints\n0" );
				  fs->Write( info, 0, info->Length );
			   }
			   finally
			   {
				  if ( fs )
						delete (IDisposable^)fs;
			   }

			   //ADD IT TO PROFILE-LIST-FILE-THINGY:
			   StreamWriter^ sw = File::AppendText( "saves/@&profile_list.txt" );
				try
				{
					sw->WriteLine( this->new_name->Text );
				}
				finally
				{
					if ( sw )
						delete (IDisposable^)sw;
				}
				int datapoint=1;
			   for each(System::String ^ str in System::IO::File::ReadLines("saves/" + this->new_name->Text + ".txt"))
				{
					System::Console::WriteLine("Loading Data: "+str);

					//load the data to the xtern variables
					switch (datapoint) {
					case 2 : {std::string tempname=""; MarshalString(str, tempname); p_name=tempname; break;}
					case 4 : {p_skin=this->ToSkin(str); break;}
					case 6 : {p_firststart=this->ToBool(str); break;}
					case 8 : {p_level=this->ToLevel(str); break;}
					case 10 : {p_health=System::Convert::ToInt32(str);}
					case 12 : {p_speed=System::Convert::ToInt32(str);}
					case 14 : {p_firepower=System::Convert::ToInt32(str);}
					case 16 : {p_lvluppoints=System::Convert::ToInt32(str);}
					}
					datapoint++;
				}
			 }

			 

			   else if (check_old->Checked)
			   {
			 //LOAD EXISTING PROFILE
			int datapoint=1;
			   for each(System::String ^ str in System::IO::File::ReadLines("saves/" + this->saved_games->SelectedItem->ToString() + ".txt"))
				{
					System::Console::WriteLine("Loading Data: "+str);

					//load the data to the extern variables
					switch (datapoint) {
					case 2 : {std::string tempname=""; MarshalString(str, tempname); p_name=tempname; break;}
					case 4 : {p_skin=this->ToSkin(str); break;}
					case 6 : {p_firststart=this->ToBool(str); break;}
					case 8 : {p_level=this->ToLevel(str); break;}
					case 10 : {p_health=System::Convert::ToInt32(str);}
					case 12 : {p_speed=System::Convert::ToInt32(str);}
					case 14 : {p_firepower=System::Convert::ToInt32(str);}
					case 16 : {p_lvluppoints=System::Convert::ToInt32(str);}
					}
					datapoint++;
				}
			   }


			 if(!p_firststart) nextwindow=MAIN;
			 else if(p_firststart) nextwindow=SPLASH;
			 this->Close();
		 }
private: System::Void b_next_Click(System::Object^  sender, System::EventArgs^  e) {
			 this->skinc++;
			 if(skinc>4) skinc=1;

			 switch(skinc) {
			 case 1 : {this->skin_display->Load("menuresource/splash_dementor.png");
					  this->skin_name->Text="Dementor";
					  break;}
			 case 2 : {this->skin_display->Load("menuresource/splash_altair.png");
					  this->skin_name->Text="Altair";
					  break;}
			 case 3 : {this->skin_display->Load("menuresource/splash_freeman.png");
					  this->skin_name->Text="Freeman";
					  break;}
			 case 4 : {this->skin_display->Load("menuresource/splash_ash.png");
					  this->skin_name->Text="Ash";
					  break;}
			 default: {this->skin_display->Load("menuresource/splash_dementor.png");
					  this->skin_name->Text="Dementor";
					  break;}
			 }
		 }
private: System::Void b_prev_Click(System::Object^  sender, System::EventArgs^  e) {
			 this->skinc--;
			 if(skinc<1) skinc=4;

			 switch(skinc) {
			 case 1 : {this->skin_display->Load("menuresource/splash_dementor.png");
					  this->skin_name->Text="Dementor";
					  break;}
			 case 2 : {this->skin_display->Load("menuresource/splash_altair.png");
					  this->skin_name->Text="Altair";
					  break;}
			 case 3 : {this->skin_display->Load("menuresource/splash_freeman.png");
					  this->skin_name->Text="Freeman";
					  break;}
			 case 4 : {this->skin_display->Load("menuresource/splash_ash.png");
					  this->skin_name->Text="Ash";
					  break;}
			 default: {this->skin_display->Load("menuresource/splash_dementor.png");
					  this->skin_name->Text="Dementor";
					  break;}
			 }
		 }
private: System::Void check_new_CheckedChanged(System::Object^  sender, System::EventArgs^  e) {
			 if(!check_new->Checked)
			 {
				new_name->Enabled=false;
				saved_games->Enabled=true;
				b_next->Enabled=false;
				b_prev->Enabled=false;
			 }
			 else
			 {
				new_name->Enabled=true;
				saved_games->Enabled=false;
				b_next->Enabled=true;
				b_prev->Enabled=true;
			 }
		 }
};
}
